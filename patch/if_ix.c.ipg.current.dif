Index: sys/dev/ixgbe/if_ix.c
===================================================================
--- sys/dev/ixgbe/if_ix.c	(revision 319171)
+++ sys/dev/ixgbe/if_ix.c	(working copy)
@@ -173,6 +173,7 @@ static int	ixgbe_set_advertise(struct adapter *, int);
 static void	ixgbe_set_sysctl_value(struct adapter *, const char *,
 		     const char *, int *, int);
 static int	ixgbe_sysctl_flowcntl(SYSCTL_HANDLER_ARGS);
+static int	ixgbe_sysctl_dpf(SYSCTL_HANDLER_ARGS);
 static int	ixgbe_sysctl_advertise(SYSCTL_HANDLER_ARGS);
 static int	ixgbe_sysctl_thermal_test(SYSCTL_HANDLER_ARGS);
 static int	ixgbe_sysctl_dmac(SYSCTL_HANDLER_ARGS);
@@ -189,6 +190,8 @@ static int	ixgbe_sysctl_eee_negotiated(SYSCTL_HANDLER_
 static int	ixgbe_sysctl_eee_rx_lpi_status(SYSCTL_HANDLER_ARGS);
 static int	ixgbe_sysctl_eee_tx_lpi_status(SYSCTL_HANDLER_ARGS);
 static int	ixgbe_sysctl_eee_tx_lpi_delay(SYSCTL_HANDLER_ARGS);
+static int	ixgbe_sysctl_tipg(SYSCTL_HANDLER_ARGS);
+static int	ixgbe_sysctl_pap(SYSCTL_HANDLER_ARGS);
 
 /* Support for pluggable optic modules */
 static bool	ixgbe_sfp_probe(struct adapter *);
@@ -616,6 +619,7 @@ ixgbe_attach(device_t dev)
 
 	/* Set an initial default flow control & dmac value */
 	adapter->fc = ixgbe_fc_full;
+	adapter->dpf = 1;
 	adapter->dmac = 0;
 	adapter->eee_enabled = 0;
 
@@ -3219,7 +3223,7 @@ ixgbe_initialize_receive_units(struct adapter *adapter
 	struct	rx_ring	*rxr = adapter->rx_rings;
 	struct ixgbe_hw	*hw = &adapter->hw;
 	struct ifnet   *ifp = adapter->ifp;
-	u32		bufsz, fctrl, srrctl, rxcsum;
+	u32		bufsz, fctrl, mflcn, srrctl, rxcsum;
 	u32		hlreg;
 
 	/*
@@ -3232,8 +3236,17 @@ ixgbe_initialize_receive_units(struct adapter *adapter
 	fctrl = IXGBE_READ_REG(hw, IXGBE_FCTRL);
 	fctrl |= IXGBE_FCTRL_BAM;
 	if (adapter->hw.mac.type == ixgbe_mac_82598EB) {
-		fctrl |= IXGBE_FCTRL_DPF;
+		fctrl &= ~IXGBE_FCTRL_DPF;
+		if (adapter->dpf)
+			fctrl |= IXGBE_FCTRL_DPF;
 		fctrl |= IXGBE_FCTRL_PMCF;
+	} else {
+		/* 82599 and newer's DPF bit is in MFLCN */
+		mflcn = IXGBE_READ_REG(hw, IXGBE_MFLCN);
+		mflcn &= ~IXGBE_MFLCN_DPF;
+		if (adapter->dpf)
+			mflcn |= IXGBE_MFLCN_DPF;
+		IXGBE_WRITE_REG(hw, IXGBE_MFLCN, mflcn);
 	}
 	IXGBE_WRITE_REG(hw, IXGBE_FCTRL, fctrl);
 
@@ -4313,6 +4326,10 @@ ixgbe_add_device_sysctls(struct adapter *adapter)
 			CTLTYPE_INT | CTLFLAG_RW, adapter, 0,
 			ixgbe_sysctl_flowcntl, "I", IXGBE_SYSCTL_DESC_SET_FC);
 
+	SYSCTL_ADD_PROC(ctx, child, OID_AUTO, "dpf",
+			CTLTYPE_INT | CTLFLAG_RW, adapter, 0,
+			ixgbe_sysctl_dpf, "I", IXGBE_SYSCTL_DESC_SET_DPF);
+
         SYSCTL_ADD_INT(ctx, child, OID_AUTO, "enable_aim",
 			CTLFLAG_RW,
 			&ixgbe_enable_aim, 1, "Interrupt Moderation");
@@ -4325,6 +4342,16 @@ ixgbe_add_device_sysctls(struct adapter *adapter)
 			CTLTYPE_INT | CTLFLAG_RW, adapter, 0,
 			ixgbe_sysctl_thermal_test, "I", "Thermal Test");
 
+	if (hw->mac.type == ixgbe_mac_82598EB)
+		SYSCTL_ADD_PROC(ctx, child, OID_AUTO, "tipg",
+		    CTLTYPE_INT | CTLFLAG_RW, adapter, 0,
+			ixgbe_sysctl_tipg, "I", "Transmit IPG register");
+
+	else if (hw->mac.type <= ixgbe_mac_X550EM_x)
+		SYSCTL_ADD_PROC(ctx, child, OID_AUTO, "pap",
+			CTLTYPE_INT | CTLFLAG_RW, adapter, 0,
+			ixgbe_sysctl_pap, "I", "Pause and Pace register");
+	
 #ifdef IXGBE_DEBUG
 	/* testing sysctls (for all devices) */
 	SYSCTL_ADD_PROC(ctx, child, OID_AUTO, "power_state",
@@ -4732,6 +4759,48 @@ ixgbe_set_flowcntl(struct adapter *adapter, int fc)
 }
 
 /*
+** Control Discard Pause Frame or send it to host using sysctl:
+** dpf values:
+** 	0 - send to the host
+**	1 - not send to the host
+*/
+static int
+ixgbe_sysctl_dpf(SYSCTL_HANDLER_ARGS)
+{
+	int error, dpf;
+	u32 fctrl, regnum, regbit;
+	struct adapter *adapter;
+	struct ixgbe_hw	*hw;
+
+	adapter = (struct adapter *) arg1;
+	hw = &adapter->hw;
+	dpf = adapter->dpf;
+
+	error = sysctl_handle_int(oidp, &dpf, 0, req);
+	if ((error) || (req->newptr == NULL))
+		return (error);
+
+	if ((dpf != 0) && (dpf != 1))
+		return (EINVAL);
+
+	adapter->dpf = dpf;
+	if (hw->mac.type == ixgbe_mac_82598EB) {
+		regnum = IXGBE_FCTRL;
+		regbit = IXGBE_FCTRL_DPF;
+	} else {
+		regnum = IXGBE_MFLCN;
+		regbit = IXGBE_MFLCN_DPF;
+	}
+	fctrl = IXGBE_READ_REG(hw, regnum);
+	fctrl &= ~regbit;
+	if (dpf == 1)
+		fctrl |= regbit;
+	IXGBE_WRITE_REG(hw, regnum, fctrl);
+
+	return (0);
+}
+
+/*
 ** Control advertised link speed:
 **	Flags:
 **	0x1 - advertise 100 Mb
@@ -4891,6 +4960,52 @@ ixgbe_sysctl_thermal_test(SYSCTL_HANDLER_ARGS)
 		reg |= IXGBE_EICR_TS;
 		IXGBE_WRITE_REG(hw, IXGBE_EICS, reg);
 	}
+
+	return (0);
+}
+
+/* 82598 only */
+static int
+ixgbe_sysctl_tipg(SYSCTL_HANDLER_ARGS)
+{
+	struct adapter *adapter = (struct adapter *)arg1;
+	int error, value;
+	u32 reg;
+
+	value = IXGBE_READ_REG(&adapter->hw, IXGBE_TIPG) & IXGBE_TIPG_IPGT_MASK;
+	error = sysctl_handle_int(oidp, &value, 0, req);
+	if (error || req->newptr == NULL)
+		return (error);
+
+	reg = IXGBE_READ_REG(&adapter->hw, IXGBE_TIPG);
+	reg &= ~IXGBE_TIPG_IPGT_MASK;
+	reg |= value & IXGBE_TIPG_IPGT_MASK;
+	IXGBE_WRITE_REG(&adapter->hw, IXGBE_TIPG, reg);
+
+	return (0);
+}
+
+/* >= 82599 && <= X550EM_x */
+static int
+ixgbe_sysctl_pap(SYSCTL_HANDLER_ARGS)
+{
+	struct adapter *adapter = (struct adapter *)arg1;
+	int error, value;
+	u32 reg;
+
+	value = IXGBE_READ_REG(&adapter->hw, IXGBE_PAP) & IXGBE_PAP_PACE_MASK;
+	value >>= 16;
+	error = sysctl_handle_int(oidp, &value, 0, req);
+	if (error || req->newptr == NULL)
+		return (error);
+
+	reg = IXGBE_READ_REG(&adapter->hw, IXGBE_PAP);
+	reg &= ~IXGBE_PAP_PACE_MASK;
+	if ((value < 0) || ((value > 9) && (value != 15)))
+		return EINVAL;
+	
+	reg |= value << 16;
+	IXGBE_WRITE_REG(&adapter->hw, IXGBE_PAP, reg);
 
 	return (0);
 }
Index: sys/dev/ixgbe/ixgbe.h
===================================================================
--- sys/dev/ixgbe/ixgbe.h	(revision 319171)
+++ sys/dev/ixgbe/ixgbe.h	(working copy)
@@ -496,6 +496,7 @@ struct adapter {
 	/* Info about the interface */
 	u32			optics;
 	u32			fc; /* local flow ctrl setting */
+	u32			dpf; /* discard pausse frame setting */
 	int			advertise;  /* link speeds */
 	bool			enable_aim; /* adaptive interrupt moderation */
 	bool			link_active;
@@ -664,6 +665,11 @@ struct adapter {
 	"\t1 - rx pause\n" \
 	"\t2 - tx pause\n" \
 	"\t3 - tx and rx pause"
+
+#define IXGBE_SYSCTL_DESC_SET_DPF \
+	"\nDiscard Pause Frame or send it to host:\n" \
+	"\t0 - send to the host\n" \
+	"\t1 - not send to the host"
 
 static inline bool
 ixgbe_is_sfp(struct ixgbe_hw *hw)
Index: sys/dev/ixgbe/ixgbe_82598.c
===================================================================
--- sys/dev/ixgbe/ixgbe_82598.c	(revision 319171)
+++ sys/dev/ixgbe/ixgbe_82598.c	(working copy)
@@ -515,7 +515,6 @@ s32 ixgbe_fc_enable_82598(struct ixgbe_hw *hw)
 	}
 
 	/* Set 802.3x based flow control settings. */
-	fctrl_reg |= IXGBE_FCTRL_DPF;
 	IXGBE_WRITE_REG(hw, IXGBE_FCTRL, fctrl_reg);
 	IXGBE_WRITE_REG(hw, IXGBE_RMCS, rmcs_reg);
 
Index: sys/dev/ixgbe/ixgbe_common.c
===================================================================
--- sys/dev/ixgbe/ixgbe_common.c	(revision 319171)
+++ sys/dev/ixgbe/ixgbe_common.c	(working copy)
@@ -2797,7 +2797,6 @@ s32 ixgbe_fc_enable_generic(struct ixgbe_hw *hw)
 	}
 
 	/* Set 802.3x based flow control settings. */
-	mflcn_reg |= IXGBE_MFLCN_DPF;
 	IXGBE_WRITE_REG(hw, IXGBE_MFLCN, mflcn_reg);
 	IXGBE_WRITE_REG(hw, IXGBE_FCCFG, fccfg_reg);
 
Index: sys/dev/ixgbe/ixgbe_type.h
===================================================================
--- sys/dev/ixgbe/ixgbe_type.h	(revision 319171)
+++ sys/dev/ixgbe/ixgbe_type.h	(working copy)
@@ -503,6 +503,7 @@
 /* Tx DCA Control register : 128 of these (0-127) */
 #define IXGBE_DCA_TXCTRL_82599(_i)	(0x0600C + ((_i) * 0x40))
 #define IXGBE_TIPG			0x0CB00
+#define IXGBE_TIPG_IPGT_MASK		0x000000FF
 #define IXGBE_TXPBSIZE(_i)		(0x0CC00 + ((_i) * 4)) /* 8 of these */
 #define IXGBE_MNGTXMAP			0x0CD10
 #define IXGBE_TIPG_FIBER_DEFAULT	3
@@ -1733,6 +1734,7 @@ enum {
 
 /* PAP bit masks*/
 #define IXGBE_PAP_TXPAUSECNT_MASK	0x0000FFFF /* Pause counter mask */
+#define IXGBE_PAP_PACE_MASK		0x000F0000 /* Pace bit mask */
 
 /* RMCS Bit Masks */
 #define IXGBE_RMCS_RRM			0x00000002 /* Rx Recycle Mode enable */
