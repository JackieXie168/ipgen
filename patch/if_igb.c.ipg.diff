Index: if_igb.c
===================================================================
--- if_igb.c	(revision 292398)
+++ if_igb.c	(working copy)
@@ -222,6 +222,7 @@
 static int	igb_set_flowcntl(SYSCTL_HANDLER_ARGS);
 static int	igb_sysctl_dmac(SYSCTL_HANDLER_ARGS);
 static int	igb_sysctl_eee(SYSCTL_HANDLER_ARGS);
+static int	igb_sysctl_tipg(SYSCTL_HANDLER_ARGS);
 
 #ifdef DEVICE_POLLING
 static poll_handler_t igb_poll;
@@ -547,6 +548,12 @@
 		}
 	}
 
+	SYSCTL_ADD_PROC(device_get_sysctl_ctx(dev),
+	    SYSCTL_CHILDREN(device_get_sysctl_tree(dev)),
+	    OID_AUTO, "tipg", CTLTYPE_INT|CTLFLAG_RW,
+	    adapter, 0, igb_sysctl_tipg, "I",
+	    "Transmit IPG register");
+
 	/*
 	** Start from a known state, this is
 	** important in reading the nvm and
@@ -6377,3 +6384,23 @@
 	IGB_CORE_UNLOCK(adapter);
 	return (0);
 }
+
+static int
+igb_sysctl_tipg(SYSCTL_HANDLER_ARGS)
+{
+	struct adapter *adapter = (struct adapter *)arg1;
+	int error, value;
+	u32 reg;
+
+	value = E1000_READ_REG(&adapter->hw, E1000_TIPG) & E1000_TIPG_IPGT_MASK;
+	error = sysctl_handle_int(oidp, &value, 0, req);
+	if (error || req->newptr == NULL)
+		return (error);
+
+	reg = E1000_READ_REG(&adapter->hw, E1000_TIPG);
+	reg &= ~E1000_TIPG_IPGT_MASK;
+	reg |= value & E1000_TIPG_IPGT_MASK;
+	E1000_WRITE_REG(&adapter->hw, E1000_TIPG, reg);
+
+	return (0);
+}
